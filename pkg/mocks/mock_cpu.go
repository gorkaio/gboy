// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gorkaio/gboy/pkg/cpu (interfaces: CPUInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCPUInterface is a mock of CPUInterface interface
type MockCPUInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCPUInterfaceMockRecorder
}

// MockCPUInterfaceMockRecorder is the mock recorder for MockCPUInterface
type MockCPUInterfaceMockRecorder struct {
	mock *MockCPUInterface
}

// NewMockCPUInterface creates a new mock instance
func NewMockCPUInterface(ctrl *gomock.Controller) *MockCPUInterface {
	mock := &MockCPUInterface{ctrl: ctrl}
	mock.recorder = &MockCPUInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCPUInterface) EXPECT() *MockCPUInterfaceMockRecorder {
	return m.recorder
}

// DebugDisable mocks base method
func (m *MockCPUInterface) DebugDisable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DebugDisable")
}

// DebugDisable indicates an expected call of DebugDisable
func (mr *MockCPUInterfaceMockRecorder) DebugDisable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugDisable", reflect.TypeOf((*MockCPUInterface)(nil).DebugDisable))
}

// DebugEnable mocks base method
func (m *MockCPUInterface) DebugEnable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DebugEnable")
}

// DebugEnable indicates an expected call of DebugEnable
func (mr *MockCPUInterfaceMockRecorder) DebugEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugEnable", reflect.TypeOf((*MockCPUInterface)(nil).DebugEnable))
}

// Step mocks base method
func (m *MockCPUInterface) Step() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Step indicates an expected call of Step
func (mr *MockCPUInterfaceMockRecorder) Step() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockCPUInterface)(nil).Step))
}
