// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gorkaio/gboy/pkg/cart (interfaces: CartInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cart "github.com/gorkaio/gboy/pkg/cart"
	reflect "reflect"
)

// MockCartInterface is a mock of CartInterface interface
type MockCartInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartInterfaceMockRecorder
}

// MockCartInterfaceMockRecorder is the mock recorder for MockCartInterface
type MockCartInterfaceMockRecorder struct {
	mock *MockCartInterface
}

// NewMockCartInterface creates a new mock instance
func NewMockCartInterface(ctrl *gomock.Controller) *MockCartInterface {
	mock := &MockCartInterface{ctrl: ctrl}
	mock.recorder = &MockCartInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartInterface) EXPECT() *MockCartInterfaceMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockCartInterface) Read(arg0 uint16) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(byte)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockCartInterfaceMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCartInterface)(nil).Read), arg0)
}

// Title mocks base method
func (m *MockCartInterface) Title() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	return ret0
}

// Title indicates an expected call of Title
func (mr *MockCartInterfaceMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockCartInterface)(nil).Title))
}

// Type mocks base method
func (m *MockCartInterface) Type() cart.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(cart.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCartInterfaceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCartInterface)(nil).Type))
}

// Write mocks base method
func (m *MockCartInterface) Write(arg0 uint16, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", arg0, arg1)
}

// Write indicates an expected call of Write
func (mr *MockCartInterfaceMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCartInterface)(nil).Write), arg0, arg1)
}
