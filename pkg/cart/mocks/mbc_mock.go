// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gorkaio/gboy/pkg/cart (interfaces: MemoryBankController)

// Package cart_mock is a generated GoMock package.
package cart_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemoryBankController is a mock of MemoryBankController interface
type MockMemoryBankController struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryBankControllerMockRecorder
}

// MockMemoryBankControllerMockRecorder is the mock recorder for MockMemoryBankController
type MockMemoryBankControllerMockRecorder struct {
	mock *MockMemoryBankController
}

// NewMockMemoryBankController creates a new mock instance
func NewMockMemoryBankController(ctrl *gomock.Controller) *MockMemoryBankController {
	mock := &MockMemoryBankController{ctrl: ctrl}
	mock.recorder = &MockMemoryBankControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemoryBankController) EXPECT() *MockMemoryBankControllerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockMemoryBankController) Read(arg0 uint16) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(byte)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockMemoryBankControllerMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMemoryBankController)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockMemoryBankController) Write(arg0 uint16, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", arg0, arg1)
}

// Write indicates an expected call of Write
func (mr *MockMemoryBankControllerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMemoryBankController)(nil).Write), arg0, arg1)
}
