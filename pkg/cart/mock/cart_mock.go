// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go

// Package cart_mock is a generated GoMock package.
package cart_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCartController is a mock of CartController interface
type MockCartController struct {
	ctrl     *gomock.Controller
	recorder *MockCartControllerMockRecorder
}

// MockCartControllerMockRecorder is the mock recorder for MockCartController
type MockCartControllerMockRecorder struct {
	mock *MockCartController
}

// NewMockCartController creates a new mock instance
func NewMockCartController(ctrl *gomock.Controller) *MockCartController {
	mock := &MockCartController{ctrl: ctrl}
	mock.recorder = &MockCartControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCartController) EXPECT() *MockCartControllerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockCartController) Read(addr uint16) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", addr)
	ret0, _ := ret[0].(byte)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockCartControllerMockRecorder) Read(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCartController)(nil).Read), addr)
}

// Write mocks base method
func (m *MockCartController) Write(addr uint16, data byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", addr, data)
}

// Write indicates an expected call of Write
func (mr *MockCartControllerMockRecorder) Write(addr, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCartController)(nil).Write), addr, data)
}
