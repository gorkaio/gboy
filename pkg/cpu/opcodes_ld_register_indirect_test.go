package cpu_test

import (
	"testing"
)

func TestLoadIndirect(t *testing.T) {
	testDescriptions := []testDescription{
        {
			"'LD (BC), A' loads A into memory address BC",
			opcode{0x02},
			regMap{"A": 0x56, "BC": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
        {
			"'LD (DE), A' loads A into memory address DE",
			opcode{0x12},
			regMap{"A": 0x56, "DE": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
        {
			"'LD (HL), B' loads B into memory address HL",
			opcode{0x70},
			regMap{"B": 0x56, "HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LD (HL), C' loads C into memory address HL",
			opcode{0x71},
			regMap{"C": 0x56, "HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
        {
			"'LD (HL), D' loads D into memory address HL",
			opcode{0x72},
			regMap{"D": 0x56, "HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LD (HL), E' loads E into memory address HL",
			opcode{0x73},
			regMap{"E": 0x56, "HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LD (HL), H' loads H into memory address HL",
			opcode{0x74},
			regMap{"HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x12},
			8,
		},
		{
			"'LD (HL), L' loads L into memory address HL",
			opcode{0x75},
			regMap{"HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x34},
			8,
		},
		{
			"'LD (HL), A' loads A into memory address HL",
			opcode{0x77},
			regMap{"A": 0x56, "HL": 0x1234},
			regMap{},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LD A, (BC)' loads content from memory address BC into A",
			opcode{0x0A},
			regMap{"BC": 0x1234},
			regMap{"BC": 0x1234, "A": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
		{
			"'LD A, (DE)' loads content from memory address DE into A",
			opcode{0x1A},
			regMap{"DE": 0x1234, "A": 0},
			regMap{"DE": 0x1234, "A": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD A, (HL)' loads content from memory address HL into A",
			opcode{0x7E},
			regMap{"HL": 0x1234, "A": 0},
			regMap{"HL": 0x1234, "A": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
		{
			"'LD B, (HL)' loads content from memory address HL into B",
			opcode{0x46},
			regMap{"HL": 0x1234, "B": 0},
			regMap{"HL": 0x1234, "B": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD C, (HL)' loads content from memory address HL into C",
			opcode{0x4E},
			regMap{"HL": 0x1234, "C": 0},
			regMap{"HL": 0x1234, "C": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD D, (HL)' loads content from memory address HL into D",
			opcode{0x56},
			regMap{"HL": 0x1234, "D": 0},
			regMap{"HL": 0x1234, "D": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD E, (HL)' loads content from memory address HL into E",
			opcode{0x5E},
			regMap{"HL": 0x1234, "E": 0},
			regMap{"HL": 0x1234, "E": 0x56},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD H, (HL)' loads content from memory address HL into H",
			opcode{0x66},
			regMap{"HL": 0x1234},
			regMap{"HL": 0x5634},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
        {
			"'LD L, (HL)' loads content from memory address HL into L",
			opcode{0x6E},
			regMap{"HL": 0x1234},
			regMap{"HL": 0x1256},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
		{
			"'LD (HL), %#02x' loads value %#02x into memory address HL",
			opcode{0x36, 0x56},
			regMap{"HL": 0x1234},
			regMap{"HL": 0x1234},
			memMap{},
			memMap{0x1234: 0x56},
			12,
		},
		{
			"'LDI (HL), A' loads A into memory address HL and increments HL",
			opcode{0x22},
			regMap{"A": 0x56, "HL": 0x1234},
			regMap{"HL": 0x1235},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LDD (HL), A' loads A into memory address HL and decrements HL",
			opcode{0x32},
			regMap{"A": 0x56, "HL": 0x1234},
			regMap{"A": 0x56, "HL": 0x1233},
			memMap{},
			memMap{0x1234: 0x56},
			8,
		},
		{
			"'LDI A, (HL)' loads content from memory address HL into A and increments HL",
			opcode{0x2A},
			regMap{"HL": 0x1234},
			regMap{"A": 0x56, "HL": 0x1235},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
		{
			"'LDD A, (HL)' loads content from memory address HL into A and decrements HL",
			opcode{0x3A},
			regMap{"HL": 0x1234},
			regMap{"A": 0x56, "HL": 0x1233},
			memMap{0x1234: 0x56},
			memMap{},
			8,
		},
		{
			"'LD (C), A' loads A into memory address (0xFF00 + C)",
			opcode{0xE2},
			regMap{"A": 0x56, "C": 0x12},
			regMap{},
			memMap{},
			memMap{0xFF12: 0x56},
			8,
		},
		{
			"'LD A, (C)' loads memory address content from (0xFF00 + C) into A",
			opcode{0xF2},
			regMap{"A": 0x56, "C": 0x12},
			regMap{},
			memMap{0xFF12: 0x56},
			memMap{},
			8,
		},
	}

	for _, testDescription := range(testDescriptions) {
		testCase := buildTestCase(testDescription)
		testCase.Run(t)
	}
}