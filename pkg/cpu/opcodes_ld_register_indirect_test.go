package cpu_test

import (
	"fmt"
	"testing"

	"github.com/gorkaio/gboy/pkg/cpu"
)

func TestLoadRegisterIndirect(t *testing.T) {
	for _, test := range testCasesForLoadRegisterIndirect() {
		testInstruction(t, test)
	}
}

func testCasesForLoadRegisterIndirect() []testCase {
	return []testCase{
		{
			description: "'LD (BC), A' loads A into memory address BC",
			instruction: []byte{0x02, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0x1234,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0x1234,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD A, (BC)' loads A with memory address BC contents",
			instruction: []byte{0x0A, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0x1234,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0x1234,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD (DE), A' loads A into memory address DE",
			instruction: []byte{0x12, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0x1234,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0x1234,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD A, (DE)' loads A with memory address DE contents",
			instruction: []byte{0x1A, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x1234,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0x1234,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LDI (HL), A' loads A into memory address HL and increments HL",
			instruction: []byte{0x22, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1235,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LDI A, (HL)' loads A with memory address HL contents and increments HL",
			instruction: []byte{0x2A, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1235,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LDD (HL), A' loads A into memory address HL and decrements HL",
			instruction: []byte{0x32, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1233,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: fmt.Sprintf("'LD (HL), %#02x' loads %#02x into memory address HL", 0x56, 0x56),
			instruction: []byte{0x36, 0x56, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x102,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 12,
		},
		{
			description: "'LDD A, (HL)' loads A with memory address HL contents and decrements HL",
			instruction: []byte{0x3A, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1233,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD B, (HL)' loads B with memory address HL contents",
			instruction: []byte{0x46, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0x5600,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD C, (HL)' loads C with memory address HL contents",
			instruction: []byte{0x4E, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0x0056,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD D, (HL)' loads D with memory address HL contents",
			instruction: []byte{0x56, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x5600,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD E, (HL)' loads E with memory address HL contents",
			instruction: []byte{0x5E, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x56,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD H, (HL)' loads H with memory address HL contents",
			instruction: []byte{0x66, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x5634,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD L, (HL)' loads L with memory address HL contents",
			instruction: []byte{0x6E, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1256,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), B' loads B into memory address HL",
			instruction: []byte{0x70, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0x5600,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0x5600,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), C' loads C into memory address HL",
			instruction: []byte{0x71, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0x0056,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0x0056,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), D' loads D into memory address HL",
			instruction: []byte{0x72, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x5600,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x5600,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), E' loads E into memory address HL",
			instruction: []byte{0x73, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x0056,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0x0056,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), H' loads H into memory address HL",
			instruction: []byte{0x74, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x12,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), L' loads L into memory address HL",
			instruction: []byte{0x75, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x34,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD (HL), A' loads A into memory address HL",
			instruction: []byte{0x77, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD A, (HL)' loads A with memory address HL contents",
			instruction: []byte{0x7E, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0,
				DE:  0,
				HL:  0x1234,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0x1234,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
		{
			description: "'LD (C), A' loads A into memory address C+0xFF00",
			instruction: []byte{0xE2, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0x5600,
				BC:  0x0012,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0x0012,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{},
			expectedWrites: []memoryAccess{
				{
					address: 0xFF12,
					data:    0x56,
				},
			},
			expectedCycles: 8,
		},
		{
			description: "'LD A, (C)' loads A with memory address C+0xFF00 contents",
			instruction: []byte{0xF2, 0x00, 0x00, 0x00},
			initialState: cpu.State{
				AF:  0,
				BC:  0x0012,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x100,
				IME: false,
			},
			expectedState: cpu.State{
				AF:  0x5600,
				BC:  0x0012,
				DE:  0,
				HL:  0,
				SP:  0,
				PC:  0x101,
				IME: false,
			},
			expectedReads: []memoryAccess{
				{
					address: 0xFF12,
					data:    0x56,
				},
			},
			expectedWrites: []memoryAccess{},
			expectedCycles: 8,
		},
	}
}
