// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/memory/memory.go

// Package memory is a generated GoMock package.
package memory

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockController) Read(address uint16) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", address)
	ret0, _ := ret[0].(byte)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockControllerMockRecorder) Read(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockController)(nil).Read), address)
}

// Write mocks base method
func (m *MockController) Write(address uint16, data byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", address, data)
}

// Write indicates an expected call of Write
func (mr *MockControllerMockRecorder) Write(address, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockController)(nil).Write), address, data)
}
